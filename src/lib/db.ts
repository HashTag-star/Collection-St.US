
'use server';

import Database from 'better-sqlite3';
import type { Product, User } from './types';

// In a production Firebase environment, you might need a writable path.
// For local dev and some App Hosting setups, this might be fine.
// If deployed to a read-only filesystem, this will fail.
const db = new Database('dev.db');
console.log('SQLite database initialized at dev.db');

// Initial data (IDs will be auto-generated by SQLite)
const initialProductsData: Omit<Product, 'id'>[] = [
  { name: 'Elegant Evening Gown', price: 250.00, description: 'A stunning full-length gown perfect for formal events. Made with high-quality silk and intricate lace details. Features a flattering A-line silhouette.', category: 'Dresses', imageUrls: ['https://placehold.co/800x1200.png', 'https://placehold.co/600x800.png', 'https://placehold.co/400x600.png'], stock: 15, status: 'Active', rating: 4.5, reviews: 25, dataAiHint: 'evening gown', sizes: ['S', 'M', 'L', 'XL'] },
  { name: 'Casual Summer Dress', price: 120.00, description: 'Light and airy summer dress, ideal for warm weather. Crafted from breathable cotton with a vibrant floral print.', category: 'Dresses', imageUrls: ['https://placehold.co/600x800.png', 'https://placehold.co/400x600.png'], stock: 30, status: 'Active', rating: 4.2, reviews: 18, dataAiHint: 'summer dress', sizes: ['XS', 'S', 'M'] },
  { name: 'Chic Office Blouse', price: 90.00, description: 'A stylish and professional blouse for the modern working woman. Made from a comfortable, wrinkle-resistant fabric.', category: 'Tops', imageUrls: ['https://placehold.co/600x800.png', 'https://placehold.co/400x600.png'], stock: 32, status: 'Active', rating: 4.8, reviews: 30, dataAiHint: 'office blouse', sizes: ['S', 'M', 'L'] },
  { name: 'Silk Scarf Collection', price: 75.00, description: 'Luxurious silk scarves in various prints. Adds a touch of elegance to any outfit.', category: 'Accessories', imageUrls: ['https://placehold.co/600x800.png'], stock: 50, status: 'Active', rating: 4.0, reviews: 10, dataAiHint: 'silk scarf', sizes: undefined },
  { name: 'Denim Jeans', price: 180.00, description: 'Comfortable and stylish denim jeans, perfect for casual wear. Available in multiple fits.', category: 'Bottoms', imageUrls: ['https://placehold.co/600x800.png'], stock: 20, status: 'Active', rating: 4.3, reviews: 22, dataAiHint: 'denim jeans', sizes: ['28', '30', '32', '34', '36'] },
  { name: 'Leather Handbag', price: 350.00, description: 'A high-quality leather handbag with multiple compartments. Durable and fashionable.', category: 'Accessories', imageUrls: ['https://placehold.co/600x800.png'], stock: 8, status: 'Active', rating: 4.9, reviews: 40, dataAiHint: 'leather handbag', sizes: undefined },
  { name: 'Summer Maxi Dress (Draft)', price: 180.00, description: 'Beautiful maxi dress for summer occasions. Made from lightweight fabric.', category: 'Dresses', imageUrls: ['https://placehold.co/600x800.png'], stock: 0, status: 'Draft', rating: 3.9, reviews: 5, dataAiHint: 'maxi dress', sizes: ['S', 'M', 'L'] },
];

const initialUsersData: Omit<User, 'id'>[] = [
    { fullName: 'Festus Us', email: 'festus@example.com', password: 'password123', avatarUrl: 'https://placehold.co/100x100.png' },
];

function initializeDatabase() {
  db.exec(`
    CREATE TABLE IF NOT EXISTS users (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      fullName TEXT NOT NULL,
      email TEXT NOT NULL UNIQUE,
      password TEXT NOT NULL, -- In a real app, this would be hashed
      avatarUrl TEXT
    );

    CREATE TABLE IF NOT EXISTS products (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      price REAL NOT NULL,
      description TEXT NOT NULL,
      category TEXT NOT NULL,
      imageUrls TEXT, -- Stored as JSON string
      stock INTEGER NOT NULL,
      status TEXT NOT NULL CHECK(status IN ('Active', 'Draft')),
      rating REAL,
      reviews INTEGER,
      dataAiHint TEXT NOT NULL,
      sizes TEXT -- Stored as JSON string
    );
  `);

  // Seed initial users if users table is empty
  const userCount = db.prepare('SELECT COUNT(*) as count FROM users').get() as { count: number };
  if (userCount.count === 0) {
    const insertUser = db.prepare(
      'INSERT INTO users (fullName, email, password, avatarUrl) VALUES (@fullName, @email, @password, @avatarUrl)'
    );
    db.transaction(() => {
      for (const user of initialUsersData) {
        insertUser.run(user);
      }
    })();
    console.log('Initial users seeded.');
  }

  // Seed initial products if products table is empty
  const productCount = db.prepare('SELECT COUNT(*) as count FROM products').get() as { count: number };
  if (productCount.count === 0) {
    const insertProduct = db.prepare(
      'INSERT INTO products (name, price, description, category, imageUrls, stock, status, rating, reviews, dataAiHint, sizes) VALUES (@name, @price, @description, @category, @imageUrls, @stock, @status, @rating, @reviews, @dataAiHint, @sizes)'
    );
    db.transaction(() => {
      for (const product of initialProductsData) {
        insertProduct.run({
          ...product,
          imageUrls: JSON.stringify(product.imageUrls || []),
          sizes: product.sizes ? JSON.stringify(product.sizes) : null, // Store undefined sizes as NULL
          rating: product.rating ?? null,
          reviews: product.reviews ?? null,
        });
      }
    })();
    console.log('Initial products seeded.');
  }
}

// Ensure database is initialized when this module is first imported
initializeDatabase();

export default db;
